# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011, The Open Knowledge Foundation
# This file is distributed under the same license as the OpenSpending package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: OpenSpending 1.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-07 16:44\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../api-aggregator.rst:2
# 7ccd95787f3a4885ba3e3d69a3ba5164
msgid "Aggregation API"
msgstr ""

#: ../api-aggregator.rst:4
# 95ca1df883ca4c44945bdb6fd9aa5f19
msgid "The data source used to drive visualizations is the aggregation API. It can be used to flexibly generate aggregated views of the data by applying filters and grouping criteria."
msgstr ""

#: ../api-aggregator.rst:8
# 1194560a6b524961a1163b3176821e17
msgid "This API is heavily based on OLAP concepts and the documentation assumes you have read :doc:`api-olap`."
msgstr ""

#: ../api-aggregator.rst:12
# bbc16ee89974401389b33445dfed63ee
msgid "Basic call and parameters"
msgstr ""

#: ../api-aggregator.rst:18
# 531241cbf744470ca66f93706f486bcc
msgid "Calls will return aggregation results as JSON. If no arguments other than the dataset are given, the whole cube is aggregated. The following parameters are supported:"
msgstr ""

#: ../api-aggregator.rst:22
# 9694717a47ed418aa6349dc6cec4ee26
msgid "The dataset name to query."
msgstr ""

#: ../api-aggregator.rst:25
# c31b9becd0134515b6b97813b6507877
msgid "The name of the measure over which aggregation will be performed. Defaults to ``amount``. Multiple measures in a single query are not yet supported, but future versions of the API may aggregate over all available measures by default."
msgstr ""

#: ../api-aggregator.rst:30
# 46c55570c41e4ccd97f97a9b681ba7b7
msgid "Filter the entries to use only a part of the cube. Only cells matching all the criteria given will be used. With ``cut=time.year:2009``, you can filter for an attribute value."
msgstr ""

#: ../api-aggregator.rst:34
# dfa9a6d2f1dc410cb34b1161ce7b9796
msgid "Multiple filters can be given separated by a pipe character: ``cut=time.year:2009|category.name:health``. If two different filters are applied to the same attribute, the query will include both results: ``cut=time.year:2009|time.year:2010`` The dimensions you use for cut will be part of the returned result."
msgstr ""

#: ../api-aggregator.rst:41
# 68195ad8857549f2940129f4bc6d202f
msgid "Dimension to be drilled down to. Each drilldown will split the result set to create a distinct result (cell) for each value of the dimension or attribute in ``drilldown``."
msgstr ""

#: ../api-aggregator.rst:45
# ea6cedc13e754a809d65717562fef793
msgid "For example ``drilldown=time.year`` will return all entries in the source data broken down by year. Multiple drilldowns can be combined: ``drilldown=year|category`` will return one cell for each year/category combination."
msgstr ""

#: ../api-aggregator.rst:50
# 314e02180451421287cabb86aa955132
msgid "Page number for paginated results, defaults to ``1``."
msgstr ""

#: ../api-aggregator.rst:53
# f98f79da6af944ed98cb82b3627c4f8f
msgid "Size of a page for paginated results, defaults to ``10000``."
msgstr ""

#: ../api-aggregator.rst:56
# 9780a8f6b1e546bb8f66272bc10133a5
msgid "List of attributes to be ordered by as a combination of ``criterion:dir`` pairs. The indicated direction is either ``asc`` for ascending order or ``desc`` for descending order. For example ``order=year:asc|category:asc`` sorts by year and then by category name."
msgstr ""

#: ../api-aggregator.rst:61
# abb80c9164654b3ea7fc0c08964806d6
msgid "The api itself is inspired by `DataBrewery Cubes <http://packages.python.org/cubes/server.html#api>`_, to which we aim to be compatible. At the moment we only implement the ``aggregate`` call of this API and do not support hierarchical dimensions queries in the same way."
msgstr ""

#: ../api-aggregator.rst:66
# 105af40e7b1c4bddb3939662888169c9
msgid "Result format"
msgstr ""

#: ../api-aggregator.rst:68
# 8a613952b7cb44b7869e9f6c494d535e
msgid "The result will contain two keys, summary and drilldown. The ``summary`` represents an aggregation of whole cuboid specified in the cut. The amount given is the sum of all drilldowns."
msgstr ""

#: ../api-aggregator.rst:72
# 64a93738ac2241f49ca5aca5e456cbe4
msgid "The ``drilldown`` contains a cell for each value of each drilled-down dimension. Cells includes the values of any attributes or dimensions which served as drilldown criteria, as well as the ``cut`` attributes."
msgstr ""

#: ../api-aggregator.rst:107
# 63933e54422645b2b14021a503cd5f49
msgid "Example: Where Does My Money Go?"
msgstr ""

#: ../api-aggregator.rst:109
# cc1700bbed614b6089ec825450f42276
msgid "To highlight the use of this API, lets look at the UK Country Regional Analysis dataset. This is a high-level survey of the UK budget and the original `Where Does My Money Go? <http://wheredoesmymoneygo.org>`_ page was based on this data."
msgstr ""

#: ../api-aggregator.rst:114
# 0860e31c94924becbb20a8763ce5e608
msgid "The first call we'll make will aggregate the complete dataset and give us a total sum (`result <http://openspending.org/api/2/aggregate?dataset=ukgov-finances-cra>`_)::"
msgstr ""

#: ../api-aggregator.rst:119
# 889f4d21f0b54b198f3a602b62221d8a
msgid "This is not very useful, however, as it includes UK spending over several years. So lets refine our query to include only 2010 figures (`result <http://openspending.org/api/2/aggregate?dataset=ukgov-finances-cra&cut=time.year:2010>`_)::"
msgstr ""

#: ../api-aggregator.rst:125
# 00f4b7765f1c4fcaa2beb596ab23034a
msgid "Much better. Now we may want to know how these funds are distributed geographically, so lets drill down by the `NUTS <http://epp.eurostat.ec.europa.eu/portal/page/portal/nuts_nomenclature/introduction>`_ names of each region of the UK (`result <http://openspending.org/api/2/aggregate?dataset=ukgov-finances-cra&cut=time.year:2010&drilldown=region>`_)::"
msgstr ""

#: ../api-aggregator.rst:131
# f636120c7bc54785a8de43f434dedfc9
msgid "Given an SVG file with the right region names, this could easily be used to drive a CSS-based choropleth map with a bit of JavaScript glue on the client side."
msgstr ""

#: ../api-aggregator.rst:135
# 7cb944f4af8848ef9df0562998efaaa5
msgid "Another set of dimensions of the CRA dataset is the `Classification of Functions of Government (COFOG) <http://unstats.un.org/unsd/cr/registry/regcst.asp?Cl=4>`_ which classifies government activity by its functional purpose. Like many taxonomies, COFOG has several levels which we have modelled as three dimensions, cofog1, cofog2 and cofog3."
msgstr ""

#: ../api-aggregator.rst:141
# 8bbe0639e6e847f28d521f0e1c9d8d75
msgid "In order to generate a `BubbleTree <http://vis4.net/blog/posts/tutorial-bubble-tree/>`_ diagram, we want to break down the full CRA dataset by each of these dimensions (`result <http://openspending.org/api/2/aggregate?dataset=ukgov-finances-cra&cut=time.year:2010&drilldown=cofog1|cofog2|cofog3>`_)::"
msgstr ""

#: ../api-aggregator.rst:147
# 9a798742d58347a88ac27ad82dd7fdf9
msgid "(Warning: this generates quite a lot of data, you may want to paginate the results to view it in your browser.)"
msgstr ""

#: ../api-aggregator.rst:150
# 3e37e326a9254663bbd3be53d3b0298c
msgid "As you can see, the aggregator API can be used to flexibly query the data to generate views such as visualizations, maps or pivot tables."
msgstr ""

